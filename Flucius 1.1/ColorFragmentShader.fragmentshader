#version 330 core
uniform struct PointLight
{
        vec4 position;
        vec4 ambient;
        vec4 diffuse;
        vec4 specular;
        vec3 attenuation;
} light;

uniform struct Material
{
        vec3  color;
        vec4  ambient;
        vec4  diffuse;
        vec4  specular;
        vec4  emission;
        float shininess;
} material;

in Vertex {
        vec3  normal;
        vec3  lightDir;
        vec3  viewDir;
        float distance;
} vert;

out vec4 color;
void main() {
	vec3 normal   = normalize(vert.normal);
	//if (normal.z < 0)
	//	normal = - normal;
    vec3 lightDir = normalize(vert.lightDir);
    vec3 viewDir  = normalize(vert.viewDir);

	float attenuation = 1.0 / (light.attenuation[0] +
                light.attenuation[1] * vert.distance +
                light.attenuation[2] * vert.distance * vert.distance);

	color = material.diffuse * 0.1;
	
	float NdotL = max(dot(normal, lightDir), 0.0);
    color += material.diffuse * light.diffuse * NdotL * attenuation;

	color = vec4(1.0, 1.0, 1.0, 1.0);

//	float RdotVpow = max(pow(dot(reflect(-lightDir, normal), viewDir), material.shininess), 0.0);
//    color += material.specular * light.specular * RdotVpow * attenuation;
}